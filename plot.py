# -*- coding: utf-8 -*-
"""thesis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QlOtfjZ2kQsv-C4PoULnxV6vzxAauo1W

"""

import numpy as np
import matplotlib.pyplot as plt
import csv

def plot(s_values, results, powers):
    colors = ['b', 'r', 'g']

    plt.figure(figsize=(12, 5))
    for i, power in enumerate(powers):
        avg_errors = [results["avg_errors"][power][s] for s in s_values]
        plt.plot(s_values, avg_errors, marker='o', linestyle='-', color=colors[i], label=f'Power {power}')
    plt.xscale('log')
    plt.yscale('log')
    plt.xlabel('Sample Size (log scale)')
    plt.ylabel('Average Error (log scale)')
    plt.title('Average Error vs. Sample Size for Different Powers')
    plt.grid(True)
    plt.legend()
    plt.show()
    
    plt.figure(figsize=(12, 5))
    for i, power in enumerate(powers):
        avg_times = [results["avg_times"][power][s] for s in s_values]
        plt.plot(s_values, avg_times, marker='o', linestyle='-', color=colors[i], label=f'Power {power}')
    plt.xscale('log')
    plt.yscale('log')
    plt.xlabel('Sample Size (log scale)')
    plt.ylabel('Average Duration (seconds, log scale)')
    plt.title('Average Duration vs. Sample Size for Different Powers')
    plt.grid(True)
    plt.legend()
    plt.show()

    plt.figure(figsize=(12, 5))
    for i, power in enumerate(powers):
        avg_variances = [results["avg_variances"][power][s] for s in s_values]
        plt.plot(s_values, avg_variances, marker='o', linestyle='-', color=colors[i], label=f'Power {power}')
    plt.xscale('log')
    plt.yscale('log')
    plt.xlabel('Sample Size (log scale)')
    plt.ylabel('Average Variance (log scale)')
    plt.title('Average Variance vs. Sample Size for Different Powers')
    plt.grid(True)
    plt.legend()
    plt.show()

    plt.figure(figsize=(12, 5))
    for i, power in enumerate(powers):
        avg_percent_errors = [results["avg_percent_errors"][power][s] for s in s_values]
        plt.plot(s_values, avg_percent_errors, marker='o', linestyle='-', color=colors[i], label=f'Power {power}')
    plt.xscale('log')
    plt.yscale('log')
    plt.xlabel('Sample Size (log scale)')
    plt.ylabel('Percent Error (log scale)')
    plt.title('Percent Error vs. Sample Size for Different Powers')
    plt.grid(True)
    plt.legend()
    plt.show()

    plt.figure(figsize=(12, 6))
    for i, power in enumerate(powers):
        estimates_per_power = [results["all_estimates"][power][s] for s in s_values]
        plt.boxplot(estimates_per_power, tick_labels=s_values)
        plt.xlabel('Sample Size')
        plt.ylabel('Estimate Distribution')
        plt.title(f'Whisker Plot of Estimates vs. Sample Size for Power {power}')
        plt.grid(True)
        plt.show()

def plot_csv(csv_file):
    results = {
        "avg_errors": {},
        "avg_times": {},
        "avg_variances": {},
        "avg_percent_errors": {},
        "all_estimates": {},
    }

    s_values = set()
    powers = set()

    with open(csv_file, mode='r') as file:
        reader = csv.DictReader(file)

        for row in reader:
            method = row['Method']
            power = float(row['Power'])
            sample_size = int(row['Sample Size'])
            
            s_values.add(sample_size)
            powers.add(power)

            if power not in results['avg_errors']:
                results['avg_errors'][power] = {}
                results['avg_times'][power] = {}
                results['avg_variances'][power] = {}
                results['avg_percent_errors'][power] = {}
                results['all_estimates'][power] = {}

            results['avg_errors'][power][sample_size] = float(row['Avg Error'])
            results['avg_times'][power][sample_size] = float(row['Avg Time'])
            results['avg_variances'][power][sample_size] = float(row['Variance'])
            results['avg_percent_errors'][power][sample_size] = float(row['Avg Percent Error'])

            if sample_size not in results['all_estimates'][power]:
                results['all_estimates'][power][sample_size] = []

            estimates = list(map(float, row['Estimates'].split(',')))
            results['all_estimates'][power][sample_size].extend(estimates)

    s_values = sorted(s_values)
    powers = sorted(powers)

    plot(s_values, results, powers)

if __name__ == '__main__':
    plot_csv('estimation_results.csv')
