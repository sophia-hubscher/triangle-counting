
@article{prescott_monte_1965,
	title = {Monte {Carlo} {Methods}.},
	volume = {14},
	issn = {00359254},
	url = {https://www.jstor.org/stable/2985345?origin=crossref},
	doi = {10.2307/2985345},
	number = {2/3},
	urldate = {2024-10-19},
	journal = {Applied Statistics},
	author = {Prescott, P. and Hammersley, J. M. and Handscomb, D. C.},
	year = {1965},
	pages = {211},
}

@book{motwani_randomized_1995,
	address = {Cambridge},
	title = {Randomized {Algorithms}},
	isbn = {9780521474658},
	url = {https://www.cambridge.org/core/books/randomized-algorithms/6A3E5CD760B0DDBA3794A100EE2843E8},
	abstract = {For many applications a randomized algorithm is either the simplest algorithm available, or the fastest, or both. This tutorial presents the basic concepts in the design and analysis of randomized algorithms. The first part of the book presents tools from probability theory and probabilistic analysis that are recurrent in algorithmic applications. Algorithmic examples are given to illustrate the use of each tool in a concrete setting. In the second part of the book, each of the seven chapters focuses on one important area of application of randomized algorithms: data structures; geometric algorithms; graph algorithms; number theory; enumeration; parallel algorithms; and on-line algorithms. A comprehensive and representative selection of the algorithms in these areas is also given. This book should prove invaluable as a reference for researchers and professional programmers, as well as for students.},
	urldate = {2024-10-16},
	publisher = {Cambridge University Press},
	author = {Motwani, Rajeev and Raghavan, Prabhakar},
	year = {1995},
	doi = {10.1017/CBO9780511814075},
}

@misc{dinitz_faster_2021,
	title = {Faster {Matchings} via {Learned} {Duals}},
	url = {http://arxiv.org/abs/2107.09770},
	doi = {10.48550/arXiv.2107.09770},
	abstract = {A recent line of research investigates how algorithms can be augmented with machine-learned predictions to overcome worst case lower bounds. This area has revealed interesting algorithmic insights into problems, with particular success in the design of competitive online algorithms. However, the question of improving algorithm running times with predictions has largely been unexplored. We take a first step in this direction by combining the idea of machine-learned predictions with the idea of "warm-starting" primal-dual algorithms. We consider one of the most important primitives in combinatorial optimization: weighted bipartite matching and its generalization to \$b\$-matching. We identify three key challenges when using learned dual variables in a primal-dual algorithm. First, predicted duals may be infeasible, so we give an algorithm that efficiently maps predicted infeasible duals to nearby feasible solutions. Second, once the duals are feasible, they may not be optimal, so we show that they can be used to quickly find an optimal solution. Finally, such predictions are useful only if they can be learned, so we show that the problem of learning duals for matching has low sample complexity. We validate our theoretical findings through experiments on both real and synthetic data. As a result we give a rigorous, practical, and empirically effective method to compute bipartite matchings.},
	urldate = {2024-10-15},
	publisher = {arXiv},
	author = {Dinitz, Michael and Im, Sungjin and Lavastida, Thomas and Moseley, Benjamin and Vassilvitskii, Sergei},
	month = jul,
	year = {2021},
	note = {arXiv:2107.09770 [cs]},
	keywords = {Computer Science - Data Structures and Algorithms, Computer Science - Machine Learning},
}

@article{duan_linear-time_2014,
	title = {Linear-{Time} {Approximation} for {Maximum} {Weight} {Matching}},
	volume = {61},
	issn = {0004-5411},
	url = {https://dl.acm.org/doi/10.1145/2529989},
	doi = {10.1145/2529989},
	abstract = {The maximum cardinality and maximum weight matching problems can be solved in Õ(m√n) time, a bound that has resisted improvement despite decades of research. (Here m and n are the number of edges and vertices.) In this article, we demonstrate that this “m√n barrier” can be bypassed by approximation. For any ε \&gt; 0, we give an algorithm that computes a (1 − ε)-approximate maximum weight matching in O(mε−1 log ε−1) time, that is, optimal linear time for any fixed ε. Our algorithm is dramatically simpler than the best exact maximum weight matching algorithms on general graphs and should be appealing in all applications that can tolerate a negligible relative error.},
	number = {1},
	urldate = {2024-10-15},
	journal = {J. ACM},
	author = {Duan, Ran and Pettie, Seth},
	month = jan,
	year = {2014},
	pages = {1:1--1:23},
}

@book{lovasz_large_2012,
	address = {Providence, Rhode Island},
	series = {American {Mathematical} {Society} colloquium publications},
	title = {Large networks and graph limits},
	isbn = {9780821890851},
	number = {volume 60},
	publisher = {American Mathematical Society},
	author = {Lovasz, Laszlo},
	year = {2012},
	keywords = {Algebra, Abstract, Combinatorics -- Graph theory -- Extremal problems, Combinatorics -- Graph theory -- Graph algorithms, Combinatorics -- Graph theory -- Graphs and abstract algebra (groups, rings, fields, etc.), Combinatorics -- Graph theory -- None of the above, but in this section, Combinatorics -- Graph theory -- Random graphs, Combinatorics -- Graph theory -- Small world graphs, complex networks, Graph theory, Operations research, mathematical programming -- Operations research and management science -- Network models, stochastic},
}

@incollection{roughgarden_algorithms_2020,
	edition = {1},
	title = {Algorithms with {Predictions}},
	copyright = {https://www.cambridge.org/core/terms},
	isbn = {9781108637435 9781108494311},
	url = {https://www.cambridge.org/core/product/identifier/9781108637435%23c30/type/book_part},
	urldate = {2024-10-15},
	booktitle = {Beyond the {Worst}-{Case} {Analysis} of {Algorithms}},
	publisher = {Cambridge University Press},
	author = {Mitzenmacher, Michael and Vassilvitskii, Sergei},
	editor = {Roughgarden, Tim},
	month = dec,
	year = {2020},
	doi = {10.1017/9781108637435.037},
	pages = {646--662},
}

@inproceedings{avron_counting_2010,
	title = {Counting {Triangles} in {Large} {Graphs} using {Randomized} {Matrix} {Trace} {Estimation}},
	url = {http://www.math.tau.ac.il/~haimav/Avron-KDD-LDMTA10.pdf},
	abstract = {Triangle counting is an important problem in graph mining with several real-world applications. Interesting metrics, such as the clustering coefficient and the transitivity ratio, involve computing the number of triangles. Furthermore, several interesting graph mining applications rely on computing the number of triangles in a large-scale graph. However, exact triangle counting is expensive and memory consuming, and current approximation algorithms are unsatisfactory and not practical for very large-scale graphs. In this paper we present a new highly-parallel randomized algorithm for approximating the number of triangles in an undirected graph. Our algorithm uses a well-known relation between the number of triangles and the trace of the cubed adjacency matrix. A Monte-Carlo simulation is used to estimate this quantity. Each sample requires O({\textbar}E{\textbar}) time and O(ǫ 2 log(1/δ)ρ(G) 2 ) samples are required to guarantee an (ǫ, δ)-approximation, where ρ(G) is a measure of the triangle sparsity of G (ρ(G) is not necessarily small). Our algorithm requires only O({\textbar}V {\textbar}) space in order to work efficiently. We present experiments that demonstrate that in practice usually only O(log 2 {\textbar}V {\textbar}) samples are required to get good approximations for graphs frequently encountered in data-mining tasks, and that our algorithm is competitive with state-of-the-art approximate triangle counting methods both in terms of accuracy and in terms of running-time. The use of Monte-Carlo simulation support parallelization well: our algorithm is embarrassingly parallel with a critical path of only O({\textbar}E{\textbar}), achievable on as few as O(log 2 {\textbar}V {\textbar}) processors.},
	urldate = {2024-10-14},
	booktitle = {Proceedings of {Kdd}-{Ldmta}’10},
	author = {Avron, H.},
	month = jul,
	year = {2010},
}

@inproceedings{seshadhri_triadic_2013,
	title = {Triadic {Measures} on {Graphs}: {The} {Power} of {Wedge} {Sampling}},
	shorttitle = {Triadic {Measures} on {Graphs}},
	url = {http://arxiv.org/abs/1202.5230},
	doi = {10.1137/1.9781611972832.2},
	abstract = {Graphs are used to model interactions in a variety of contexts, and there is a growing need to quickly assess the structure of a graph. Some of the most useful graph metrics, especially those measuring social cohesion, are based on triangles. Despite the importance of these triadic measures, associated algorithms can be extremely expensive. We propose a new method based on wedge sampling. This versatile technique allows for the fast and accurate approximation of all current variants of clustering coefficients and enables rapid uniform sampling of the triangles of a graph. Our methods come with provable and practical time-approximation tradeoffs for all computations. We provide extensive results that show our methods are orders of magnitude faster than the state-of-the-art, while providing nearly the accuracy of full enumeration. Our results will enable more wide-scale adoption of triadic measures for analysis of extremely large graphs, as demonstrated on several real-world examples.},
	urldate = {2024-10-09},
	booktitle = {Proceedings of the 2013 {SIAM} {International} {Conference} on {Data} {Mining}},
	author = {Seshadhri, C. and Pinar, Ali and Kolda, Tamara G.},
	month = may,
	year = {2013},
	note = {arXiv:1202.5230 [cs]},
	keywords = {Computer Science - Discrete Mathematics, Computer Science - Social and Information Networks},
	pages = {10--18},
}

@inproceedings{tsourakakis_doulion_2009,
	address = {New York, NY, USA},
	series = {{KDD} '09},
	title = {{DOULION}: counting triangles in massive graphs with a coin},
	isbn = {9781605584959},
	shorttitle = {{DOULION}},
	url = {https://dl.acm.org/doi/10.1145/1557019.1557111},
	doi = {10.1145/1557019.1557111},
	abstract = {Counting the number of triangles in a graph is a beautiful algorithmic problem which has gained importance over the last years due to its significant role in complex network analysis. Metrics frequently computed such as the clustering coefficient and the transitivity ratio involve the execution of a triangle counting algorithm. Furthermore, several interesting graph mining applications rely on computing the number of triangles in the graph of interest.In this paper, we focus on the problem of counting triangles in a graph. We propose a practical method, out of which all triangle counting algorithms can potentially benefit. Using a straightforward triangle counting algorithm as a black box, we performed 166 experiments on real-world networks and on synthetic datasets as well, where we show that our method works with high accuracy, typically more than 99\% and gives significant speedups, resulting in even ≈ 130 times faster performance.},
	urldate = {2024-10-09},
	booktitle = {Proceedings of the 15th {ACM} {SIGKDD} international conference on {Knowledge} discovery and data mining},
	publisher = {Association for Computing Machinery},
	author = {Tsourakakis, Charalampos E. and Kang, U. and Miller, Gary L. and Faloutsos, Christos},
	month = jun,
	year = {2009},
	pages = {837--846},
}

@inproceedings{tsourakakis_fast_2008,
	title = {Fast {Counting} of {Triangles} in {Large} {Real} {Networks} without {Counting}: {Algorithms} and {Laws}},
	shorttitle = {Fast {Counting} of {Triangles} in {Large} {Real} {Networks} without {Counting}},
	url = {https://ieeexplore.ieee.org/document/4781156/},
	doi = {10.1109/ICDM.2008.72},
	abstract = {How can we quickly find the number of triangles in a large graph, without actually counting them? Triangles are important for real world social networks, lying at the heart of the clustering coefficient and of the transitivity ratio. However, straight-forward and even approximate counting algorithms can be slow, trying to execute or approximate the equivalent of a 3-way database join. In this paper, we provide two algorithms, the eigentriangle for counting the total number of triangles in a graph, and the eigentrianglelocal algorithm that gives the count of triangles that contain a desired node. Additional contributions include the following: (a) We show that both algorithms achieve excellent accuracy, with up to sime 1000x faster execution time, on several, real graphs and (b) we discover two new power laws (degree-triangle and triangleparticipation laws) with surprising properties.},
	urldate = {2024-10-09},
	booktitle = {2008 {Eighth} {IEEE} {International} {Conference} on {Data} {Mining}},
	author = {Tsourakakis, Charalampos E.},
	month = dec,
	year = {2008},
	note = {ISSN: 2374-8486},
	keywords = {Application software, Clustering algorithms, Data mining, Eigenvalues and eigenfunctions, Graph Generators, Graph Mining, Intrusion detection, Machine learning, Machine learning algorithms, Power laws, Social network services, Triangles, Web sites, Wikipedia},
	pages = {608--617},
}

@article{strassen_gaussian_1969,
	title = {Gaussian {Elimination} is not {Optimal}.},
	volume = {13},
	issn = {0029-599X; 0945-3245/e},
	url = {https://eudml.org/doc/131927},
	language = {und},
	urldate = {2024-10-07},
	journal = {Numerische Mathematik},
	author = {Strassen, V.},
	year = {1969},
	pages = {354--356},
}

@article{beum_method_1950,
	title = {A {Method} for {Analyzing} the {Sociomatrix}},
	volume = {13},
	issn = {0038-0431},
	url = {https://www.jstor.org/stable/2784940},
	doi = {10.2307/2784940},
	number = {2},
	urldate = {2024-10-06},
	journal = {Sociometry},
	author = {Beum, Corlin O. and Brundage, Everett G.},
	year = {1950},
	pages = {141--145},
}

@article{al_hasan_triangle_2018,
	title = {Triangle counting in large networks: a review},
	volume = {8},
	copyright = {http://onlinelibrary.wiley.com/termsAndConditions\#am},
	issn = {1942-4787, 1942-4795},
	shorttitle = {Triangle counting in large networks},
	url = {https://wires.onlinelibrary.wiley.com/doi/10.1002/widm.1226},
	doi = {10.1002/widm.1226},
	abstract = {Counting and enumeration of local topological structures, such as triangles, is an important task for analyzing large real‐life networks. For instance, triangle count in a network is used to compute transitivity—an important property for understanding graph evolution over time. Triangles are also used for various other tasks completed for real‐life networks, including community discovery, link prediction, and spam filtering. The task of triangle counting, though simple, has gained wide attention in recent years from the data mining community. This is due to the fact that most of the existing algorithms for counting triangles do not scale well to very large networks with millions (or even billions) of vertices. To circumvent this limitation, researchers proposed triangle counting methods that approximate the count or run on distributed clusters. In this paper, we discuss the existing methods of triangle counting, ranging from sequential to parallel, single‐machine to distributed, exact to approximate, and off‐line to streaming. We also present experimental results of performance comparison among a set of approximate triangle counting methods built under a unified implementation framework. Finally, we conclude with a discussion of future works in this direction. 
              WIREs Data Mining Knowl Discov 
              2018, 8:e1226. doi: 10.1002/widm.1226 
             
             
              This article is categorized under: 
               
                 
                  Algorithmic Development {\textgreater} Structure Discovery},
	language = {en},
	number = {2},
	urldate = {2024-09-30},
	journal = {WIREs Data Mining and Knowledge Discovery},
	author = {Al Hasan, Mohammad and Dave, Vachik S.},
	month = mar,
	year = {2018},
	pages = {e1226},
}